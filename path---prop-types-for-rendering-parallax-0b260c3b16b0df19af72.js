webpackJsonp([0xcc27900c79b6],{"./node_modules/json-loader/index.js!./.cache/json/prop-types-for-rendering-parallax.json":function(a,n){a.exports={data:{markdownRemark:{html:'<h2 id="notes"><a href="#notes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NOTES</h2>\n<blockquote>\n<p>A React.js application is created by lots of components. These components get many specific attributes, just like a HTML tag does.  These attributes are called ”props” in React and can be of any type. It can be a string, function or an Array, as long as its valid javascript you can use it as a prop.</p>\n</blockquote>\n<p>The value of using <code>PropTypes</code> is that...   </p>\n<blockquote>\n<p>If I’m using a component written by another developer I have to figure out what props that component want, what’s required and also the correct type. React has a solution for this and its called propTypes. PropTypes defines type and which props are required. This benefits the future you and other developer using your component in two ways:</p>\n</blockquote>\n<ol>\n<li>You can easily open up a component and check which props are required and what type they should be.</li>\n<li>When things get messed up React will give you an awesome error message in the console, saying which props is wrong/missing plus the render method that caused the problem.</li>\n</ol>\n<h2 id="scroll-parallax-use-case"><a href="#scroll-parallax-use-case" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Scroll Parallax Use Case</h2>\n<p><strong>src/pages/index.jsx</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ParallaxProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-scroll-parallax\'</span><span class="token punctuation">;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ParallaxProvider</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PostListing</span> <span class="token attr-name">postEdges</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>postEdges<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ParallaxProvider</span><span class="token punctuation">></span></span>\n</code></pre>\n      </div>\n<p><strong>src/components/PostListing/PostListing.jsx</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Parallax</span>\n  <span class="token attr-name">offsetYMax</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span> <span class="token number">40</span> <span class="token punctuation">}</span></span>\n  <span class="token attr-name">offsetYMin</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">20</span> <span class="token punctuation">}</span></span>\n  <span class="token attr-name">slowerScrollRate</span>\n<span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>md-grid md-cell--8 mobile-fix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">{</span>postList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>post <span class="token operator">=></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PostPreview</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span></span> <span class="token attr-name">postInfo</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>post<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">}</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Parallax</span><span class="token punctuation">></span></span>\n</code></pre>\n      </div>\n<blockquote>\n<p>Scroll state and positions of elements on the page are cached for performance reasons. This means that if the page height changes (perhaps from images loading) after <Parallax /> components are mounted the controller won\'t properly determine when the elements are in view. To correct this you can call the parallaxController.update() method from any child component of the <ParallaxProvider /> via context. More details on how here: Parallax Controller Context.</p>\n</blockquote>\n<h3 id="parallax-component-props"><a href="#parallax-component-props" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Parallax Component Props</h3>\n<ul>\n<li><code>offsetXMax</code></li>\n<li><code>offsetXMin</code></li>\n<li><code>offsetYMax</code></li>\n<li><code>offsetYMin</code></li>\n<li><code>slowerScrollRate</code></li>\n</ul>',timeToRead:2,excerpt:"NOTES A React.js application is created by lots of components. These components get many specific attributes, just like a HTML tag does…",frontmatter:{title:"Prop Types for Rendering Parallax",cover:"https://unsplash.it/400/300?image=118",date:"2017-10-08",category:"React Plugins",tags:["component props"]},fields:{nextTitle:"Material Design Starter",nextSlug:"/material-design-starter",prevTitle:"Unified API",prevSlug:"/unified-api",slug:"/prop-types-for-rendering-parallax"}}},pathContext:{slug:"/prop-types-for-rendering-parallax"}}}});
//# sourceMappingURL=path---prop-types-for-rendering-parallax-0b260c3b16b0df19af72.js.map